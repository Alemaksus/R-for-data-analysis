View(data.stan)
View(data.stan)
library("vroom")
library("dplyr")
library("dummies")
install.packages("vroom")
install.packages("devtools")
devtools::install_github("tidyverse/googlesheets4")
library("vroom")
library("dplyr")
library("dummies")
pl_data <- vroom("https://raw.githubusercontent.com/Alemaksus/FL-orders/Variables_in_R_Studio/panelist_2nd.csv") %>%
arrange(Date_of_purchase) %>%
arrange(Panelist)
colnames(pl_data)
# Categories Data Frames:
others_df <- filter(pl_data, BG_Category_name == "Other Flavored Carbonates")
lemonades_df <- filter(pl_data, BG_Category_name == "Lemonades")
colas_df <- filter(pl_data, BG_Category_name == "Colas")
# int<lower=1> N; // Number of observations -> Total number of all
# observations
N_others <- NROW(others_df)
N_lemonades <- NROW(lemonades_df)
N_colas <- NROW(colas_df)
# Matrix Xdummies:
categories = unique(pl_data$BG_Category_name)
Xdummies <- data.frame(dummy(pl_data$Brand));
void = dummy(pl_data$Flavor); Xdummies = cbind(Xdummies, void)
void = dummy(pl_data$Form); Xdummies = cbind(Xdummies, void)
void = dummy(pl_data$Size); Xdummies = cbind(Xdummies, void)
dat = cbind(pl_data, Xdummies)
Xdummies = Xdummies[!duplicated(pl_data$Barcode),]
remove(void)
others_dat = dat[dat$BG_Category_name == categories[1],]
colas_dat = dat[dat$BG_Category_name == categories[2],]
lemonades_dat = dat[dat$BG_Category_name == categories[3],]
# int<lower=1> L; //L Number of households
L <- length(unique(pl_data$Panelist))
L_others <- length(unique(others_df$Panelist))
L_lemonades <- length(unique(lemonades_df$Panelist))
L_colas <- length(unique(colas_df$Panelist))
# int<lower=1> M; // Number of attributes -> Number of product attributes
# (We have 4 too:
# taste = pl_data$BG_Category_name;
# size = pl_data$Size;
# flavor = pl_data$Flavor;
# type = pl_data$Form.
M <- length(cbind(is.integer(pl_data$BG_Category_name), is.integer(pl_data$Size), is.integer(pl_data$Flavor), is.integer(pl_data$Form)))
# int<lower=0> tot_choices; // Total number of choices made ->
# The overall number of choice occasions across customers
# (i.e. purchase occasions), i.e. number of 1s in column ‘Choice’
# (if I buy 1 or more items, it will be tot_choices  = 1)
tot_choices <- sum(pl_data$Choice > 0)
tot_choices_others <- sum(others_df$Choice > 0)
tot_choices_lemonades <- sum(lemonades_df$Choice > 0)
tot_choices_colas <- sum(colas_df$Choice > 0)
# int<lower=0> n_choices[L]; //Number of choices made per household ->
# A vector of size L, indicating the number of choices per household ->
# Should sum to tot_choices
n_choices_others = c()
validation_tot_choices_others = 0
for (household in unique(others_df$Panelist)) {
household_string = as.character(household) # cast to string
household_indicator = others_df$Panelist == household # get boolean array for particular household
houshold_choices = sum(others_df$Choice[household_indicator] > 0)
n_choices_others[household_string] = houshold_choices
validation_tot_choices_others = validation_tot_choices_others + houshold_choices
}
n_choices_others
is.vector(n_choices_others)
validation_tot_choices_others == tot_choices_others
### n_choices_lemonades ###
n_choices_lemonades = c()
validation_tot_choices_lemonades = 0
for (household in unique(lemonades_df$Panelist)) {
household_string = as.character(household) # cast to string
household_indicator = lemonades_df$Panelist == household # get boolean array for particular household
houshold_choices = sum(lemonades_df$Choice[household_indicator] > 0)
n_choices_lemonades[household_string] = houshold_choices
validation_tot_choices_lemonades = validation_tot_choices_lemonades + houshold_choices
}
n_choices_lemonades
### n_choices_colas ###
n_choices_colas = c()
validation_tot_choices_colas = 0
for (household in unique(colas_df$Panelist)) {
household_string = as.character(household) # cast to string
household_indicator = colas_df$Panelist == household # get boolean array for particular household
houshold_choices = sum(colas_df$Choice[household_indicator] > 0)
n_choices_colas[household_string] = houshold_choices
validation_tot_choices_colas = validation_tot_choices_colas + houshold_choices
}
n_choices_colas
# int<lower=0> obs_p_choice[tot_choices]; // Number of observations per
# choice -> The choice set size per choice occasion -> Should sum to N.
# In other words, it shows an assortment (number of SkUs) in a particular shop
# in a particular date ( can be found in the ‘Assortment’ table)
obs_p_choice_others = expand.grid(unique(others_df$Shop), unique(others_df$Date_of_purchase))
colnames(obs_p_choice_others) = c("Shop", "Date")
obs_p_choice_others["Choice"] = 0
for (i in 1:nrow(obs_p_choice_others)) {
shop = obs_p_choice_others[i, 1]
date = obs_p_choice_others[i, 2]
filter = (others_df$Date_of_purchase == date) & (others_df$Shop == shop)
obs_p_choice_others$Choice[i] = length(others_df$Barcode[filter])
}
sum(obs_p_choice_others$Choice) == N_others
### obs_p_choice_lemonades ###
obs_p_choice_lemonades = expand.grid(unique(lemonades_df$Shop), unique(lemonades_df$Date_of_purchase))
colnames(obs_p_choice_lemonades) = c("Shop", "Date")
obs_p_choice_lemonades["Choice"] = 0
for (i in 1:nrow(obs_p_choice_lemonades)) {
shop = obs_p_choice_lemonades[i, 1]
date = obs_p_choice_lemonades[i, 2]
filter = (lemonades_df$Date_of_purchase == date) & (lemonades_df$Shop == shop)
obs_p_choice_lemonades$Choice[i] = length(lemonades_df$Barcode[filter])
}
sum(obs_p_choice_lemonades$Choice) == N_lemonades
### obs_p_choice_colas ###
obs_p_choice_colas = expand.grid(unique(colas_df$Shop), unique(colas_df$Date_of_purchase))
colnames(obs_p_choice_colas) = c("Shop", "Date")
obs_p_choice_colas["Choice"] = 0
for (i in 1:nrow(obs_p_choice_colas)) {
shop = obs_p_choice_colas[i, 1]
date = obs_p_choice_colas[i, 2]
filter = (colas_df$Date_of_purchase == date) & (colas_df$Shop == shop)
obs_p_choice_colas$Choice[i] = length(colas_df$Barcode[filter])
}
sum(obs_p_choice_colas$Choice) == N_colas
others_df <- filter(pl_data, BG_Category_name == "Other Flavored Carbonates")
lemonades_df <- filter(pl_data, BG_Category_name == "Lemonades")
colas_df <- filter(pl_data, BG_Category_name == "Colas")
price_q_others <- factor(c(others_df$Price), labels=others_df$Choice > 0)
price_q_others <- subset(others_df$Price, labels=c(others_df$Choice > 0))
discount_q <-
# 21) vector[n_q] sugar_q; // Sugar variable for quantity. Vector of all
# sugar contents where choice >0
sugar_q <-
# 22) int<lower=1> qq[n_q] // A vector which takes the same value for all
# observation that belong to the same household (e.g. 1 for the first HH,
# 2 for the second HH etc.). Length is equal to n_q, the total number
# of observations where a purchase is made
qq <-
# 23) vector<lower=0, upper=1>[N] y; -> An indicator variable of size N
# which is 1 for the chosen product, and 0 otherwise (should thus sum to n_q)
upper <-
### Final file should look like a duplicate of ‘data.stan’ but divided
### by category (3 final files).
variables_others <- data.frame(
Name = c(N_others, L_others, M, tot_choices_others, n_choices_others, Xdummies_Others, row_xdum_Others, col_xdum_Others, baseline_vector_Others, price_others, discount_others, sugar_others, n_q_others)
)
price_q_others <- subset(others_df$Price, labels=c(others_df$Choice > 0))
price_q_others <- c(subset(others_df$Price, labels=c(others_df$Choice > 0)))
price_q_others <- c(subset(others_df$Price, labels=c('others_df$Choice > 0')))
price_q_others <- c(filter(others_df$Price == others_df$Choice > 0))
price_q_others <- c(filter(others_df$Price,  others_df$Choice == others_df$Choice > 0))
sugar_others <- c(others_df$Grams_of_sugar_per_100_ml) # Sugar variable
price_q_others <- c(filter(others_df$Price,  others_df$Choice == others_df$Choice > 0))
price_q_others <- c(filter(others_df$Price, others_df$Choice == others_df$Choice > 0))
price_q_others <- c(filter(others_df$Price if others_df$Choice == others_df$Choice > 0))
value(L_others)
baseline_vector_Others
baseline_vector_Others = list()
for (i in 1:row_xdum_Others) {
baseline_vector_Others[i] = 0
for (j in i:row_xdum_Others) {
if (all(Xdummies_Others[i,] == Xdummies_Others[j,]))
baseline_vector_Others[i] = baseline_vector_Others[[i]] + 1
}
}
row_xdum_Others <- nrow(Xdummies_Others)
row_xdum_Colas <- nrow(Xdummies_Colas)
row_xdum_Lemonades <- nrow(Xdummies_Lemonades)
filtered_data_others = pl_data[pl_data$BG_Category_name == categories[1],]
flavor = dummy(filtered_data$Flavor)
size = dummy(filtered_data$Size)
form = dummy(filtered_data$Form)
brand = dummy(filtered_data$Brand)
barcodes = filtered_data$Barcode
Xdummies_Others = data.frame(Barcode=barcodes, flavor, size, form, brand)
others_df <- filter(pl_data, BG_Category_name == "Other Flavored Carbonates")
lemonades_df <- filter(pl_data, BG_Category_name == "Lemonades")
colas_df <- filter(pl_data, BG_Category_name == "Colas")
N_others <- NROW(others_df)
N_lemonades <- NROW(lemonades_df)
N_colas <- NROW(colas_df)
categories = unique(pl_data$BG_Category_name)
Xdummies <- data.frame(dummy(pl_data$Brand));
void = dummy(pl_data$Flavor); Xdummies = cbind(Xdummies, void)
void = dummy(pl_data$Form); Xdummies = cbind(Xdummies, void)
void = dummy(pl_data$Size); Xdummies = cbind(Xdummies, void)
dat = cbind(pl_data, Xdummies)
Xdummies = Xdummies[!duplicated(pl_data$Barcode),]
remove(void)
others_dat = dat[dat$BG_Category_name == categories[1],]
colas_dat = dat[dat$BG_Category_name == categories[2],]
lemonades_dat = dat[dat$BG_Category_name == categories[3],]
L <- length(unique(pl_data$Panelist))
L_others <- length(unique(others_df$Panelist))
L_lemonades <- length(unique(lemonades_df$Panelist))
L_colas <- length(unique(colas_df$Panelist))
M <- length(cbind(is.integer(pl_data$BG_Category_name), is.integer(pl_data$Size), is.integer(pl_data$Flavor), is.integer(pl_data$Form)))
tot_choices <- sum(pl_data$Choice > 0)
tot_choices_others <- sum(others_df$Choice > 0)
tot_choices_lemonades <- sum(lemonades_df$Choice > 0)
tot_choices_colas <- sum(colas_df$Choice > 0)
n_choices_others = c()
validation_tot_choices_others = 0
for (household in unique(others_df$Panelist)) {
household_string = as.character(household) # cast to string
household_indicator = others_df$Panelist == household # get boolean array for particular household
houshold_choices = sum(others_df$Choice[household_indicator] > 0)
n_choices_others[household_string] = houshold_choices
validation_tot_choices_others = validation_tot_choices_others + houshold_choices
}
n_choices_others
is.vector(n_choices_others)
validation_tot_choices_others == tot_choices_others
n_choices_lemonades = c()
validation_tot_choices_lemonades = 0
for (household in unique(lemonades_df$Panelist)) {
household_string = as.character(household) # cast to string
household_indicator = lemonades_df$Panelist == household # get boolean array for particular household
houshold_choices = sum(lemonades_df$Choice[household_indicator] > 0)
n_choices_lemonades[household_string] = houshold_choices
validation_tot_choices_lemonades = validation_tot_choices_lemonades + houshold_choices
}
n_choices_colas = c()
validation_tot_choices_colas = 0
for (household in unique(colas_df$Panelist)) {
household_string = as.character(household) # cast to string
household_indicator = colas_df$Panelist == household # get boolean array for particular household
houshold_choices = sum(colas_df$Choice[household_indicator] > 0)
n_choices_colas[household_string] = houshold_choices
validation_tot_choices_colas = validation_tot_choices_colas + houshold_choices
}
n_choices_colas
obs_p_choice_others = expand.grid(unique(others_df$Shop), unique(others_df$Date_of_purchase))
colnames(obs_p_choice_others) = c("Shop", "Date")
obs_p_choice_others["Choice"] = 0
for (i in 1:nrow(obs_p_choice_others)) {
shop = obs_p_choice_others[i, 1]
date = obs_p_choice_others[i, 2]
filter = (others_df$Date_of_purchase == date) & (others_df$Shop == shop)
obs_p_choice_others$Choice[i] = length(others_df$Barcode[filter])
}
sum(obs_p_choice_others$Choice) == N_others
filtered_data_others = pl_data[pl_data$BG_Category_name == categories[1],]
flavor = dummy(filtered_data$Flavor)
size = dummy(filtered_data$Size)
form = dummy(filtered_data$Form)
brand = dummy(filtered_data$Brand)
barcodes = filtered_data$Barcode
Xdummies_Others = data.frame(Barcode=barcodes, flavor, size, form, brand)
filtered_data = pl_data[pl_data$BG_Category_name == categories[2],]
flavor = dummy(filtered_data$Flavor)
size = dummy(filtered_data$Size)
form = dummy(filtered_data$Form)
brand = dummy(filtered_data$Brand)
barcodes = filtered_data$Barcode
Xdummies_Colas = data.frame(Barcode=barcodes, flavor, size, form, brand)
filtered_data = pl_data[pl_data$BG_Category_name == categories[3],]
flavor = dummy(filtered_data$Flavor)
size = dummy(filtered_data$Size)
form = dummy(filtered_data$Form)
brand = dummy(filtered_data$Brand)
barcodes = filtered_data$Barcode
Xdummies_Lemonades = data.frame(Barcode=barcodes, flavor, size, form, brand)
row_xdum_Others <- nrow(Xdummies_Others)
row_xdum_Colas <- nrow(Xdummies_Colas)
row_xdum_Lemonades <- nrow(Xdummies_Lemonades)
col_xdum_Others = ncol(Xdummies_Others)
col_xdum_Colas = ncol(Xdummies_Colas)
col_xdum_Lemonades = ncol(Xdummies_Lemonades)
baseline_vector_Others = list()
for (i in 1:row_xdum_Others) {
baseline_vector_Others[i] = 0
for (j in i:row_xdum_Others) {
if (all(Xdummies_Others[i,] == Xdummies_Others[j,]))
baseline_vector_Others[i] = baseline_vector_Others[[i]] + 1
}
}
baseline_vector_Lemonades = list()
for (i in 1:row_xdum_Lemonades) {
baseline_vector_Lemonades[i] = 0
for (j in i:row_xdum_Lemonades) {
if (all(Xdummies_Lemonades[i,] == Xdummies_Lemonades[j,]))
baseline_vector_Lemonades[i] = baseline_vector_Lemonades[[i]] + 1
}
}
10 : 30
mean(10 : 30)
1243 + 456
plot(1:10. 1:10)
plot(1:10, 1:10)
?plot
my_var1 <- 42
my_var2 <- 35.25
my_var1 + 100
my_var1 + my_var2 -12
my_var1 + my_var2 - 12
my_var3 <- my_var1**2 + my_var2**2
my_var3
my_var3 > 200
my_var3 > 3009
my_var1 != my_var2
my_new_var <- my_var1 == my_var2
my_new_var
1 : 67
my_vector <- 1:67
my_vector
my_vector2 <- c(-32, 45,67,12.78, 128, 0, -65)
my_vector[1]
my_vector2[2]
my_vector2[c(1,2,3)]
my_vector2[1:3]
my_vector2[c(1,5,8)]
my_vector2[c(1,5,7)]
the_best_vector <- c(1:5000, 7000:10000)
the_best_vector
the_best_vector[7000]
my_vector + 10
my_vector2 + 56
my_vector2 > 0
my_vector2[my_vector2 > 0]
library("vroom")
library("dplyr")
library("dummies")
# Packages loading & connection
install.packages("vroom")
install.packages("vroom")
install.packages("devtools")
devtools::install_github("tidyverse/googlesheets4")
library("vroom")
library("dplyr")
library("dummies")
pl_data <- vroom("https://raw.githubusercontent.com/Alemaksus/FL-orders/Variables_in_R_Studio/panelist_2nd.csv") %>%
arrange(Date_of_purchase) %>%
arrange(Panelist)
colnames(pl_data)
my_vector2[my_vector2 > 0]
my_vector2[my_vector2 < 0]
my_vector > 20 & my_vector < 30
my_vector[my_vector > 20 & my_vector < 30]
my_nnumbers <- my_vector[my_vector > 20 & my_vector < 30]
positive_numbers <- my_vector2[my_vector2 > 0]
positive_numbers
v1 <- c(165, 178, 180, 181, 167, 178, 187, 167, 187)
mean_v1 <- mean(v1)
v1[v1 > mean_v1]
greater_than_mean <- v1[v1 > mean_v1]
greater_than_mean
my_sum <- sum(my_vector[my_vector > 10])
my_sum
age <- c(16, 18, 22, 27)
is_married <- c(F, F, T, T)
data <- list(age, is_married)
data
data[[1]][1]
data[[2]][3]
df <- data.frame(Name = name, Age = age,
Status = is_married)
name <- c('Olga', 'Maria', 'Nastya', 'Polina')
df <- data.frame(Name = name, Age = age,
Status = is_married)
df
View(df)
typeof(df)
v1[v1 > mean_v1]
mydata <- read.csv('evals.csv')
mydata <- read.csv('evals.csv')
mydata <- read.csv('https://stepic.org/media/attachments/lesson/11481/evals.csv')
mydata
a <- 10
if (a > 0){
print('positive')
} else {
print('not positive')
}
a <- -10
if (a > 0){
print('positive')
} else {
print('not positive')
}
a <- -10
if (a > 0){
print('positive')
} else {
print('not positive')
print(a+1)
}
a <- 10
ifelse(a > 0, 'positive', 'not positive')
a <- c(1, -1)
ifelse(a > 0, 'positive', 'not positive')
for (i in 1:100){
print(i)
}
nrow(mydata)
for (i in 1:nrow(mydata)){
print(mydata$score[i])
}
for (i in 1:nrow(mydata)){
if (mydata$gender[i] == 'male'){
print(mydata$score[i])
}
for (i in 1:nrow(mydata)){
if (mydata$gender[i] == 'male'){
print(mydata$score[i])
}
}
for (i in 1:nrow(mydata)){
if (mydata$gender[i] == 'male'){
print(mydata$score[i])
}
}
# значение score.
for (i in 1:nrow(mydata)){
if (mydata$gender[i] == 'male'){
print(mydata$score[i])
}
}
mydata$quality <- rep(NA, nrow(mydata))
mydata
View(mydata)
library(cluster)
animals
install.packages("cluster")
library(cluster)
animals
source("C:/Coding/Data Science/R/GB/start_in_r.R", encoding = 'UTF-8', echo=TRUE)
?animals
is.na(animals)
sum(is.na(animals))
head(animals, 3)
animals$gro
animals$gro[!is.na(animals$gro)]
is.na(animals$gro)
!is.na(animals$gro)
animals$gro[!is.na(animals[,5])]
head(iris, 10)
tail(iris)
dim(iris)
str(iris)
unique(iris)
unique(iris$Species)
levels(iris$Species)
iris[1,1]
traindat<-iris[1:5, c(2,3,5)]
traindat
traindat[traindat$Sepal.Width>3,]
traindat[traindat$Sepal.Width>3, & traindat$Petal.Length>1.4,]
traindat[traindat$Sepal.Width>3, &traindat$Petal.Length>1.4,]
traindat[traindat$Sepal.Width>3 &traindat$Petal.Length>1.4,]
traindat[traindat$Sepal.Width>3 & traindat$Petal.Length>1.4,]
weight<- c(78, 56, 67, 48, 69, 90)
height<- c(170, 160, 160, 165, 159, 170, 185)
sex<- c(rep("F", 3), rep("M", 3))
sex
class(sex)
df.1<- data.frame(weight, height,sex,stringsAsFactors = T)
height<- c(170, 160, 165, 159, 170, 185)
df.1<- data.frame(weight, height, sex, stringsAsFactors = T)
df.1
df.1<- data.frame(weight, height, sex, stringsAsFactors = F)
df.1
df.2<- data.frame(weight, height, sex, stringsAsFactors = T)
df.2
str(df.1)
str(df.2)
unique(sex)
factor(sex)
levels(factor(sex))
m<- 1:30
dim(m)
m
z<-c(10,3)
z
dim(m)<-z
m
class(m)
y<- 1:50
y
mt<-matrix(y,10,5)
mt
imena<- LETTERS[1:10]
imena
cbind(imena,mt)
rownames(mt)
colnames(mt)
rownames(mt,do.NULL = T, prefix = "row")
rownames(mt)<-imena
mt
colnames(mt,do.NULL = TRUE, prefix = "col")
colnames(mt)<- paste0("day", 1:5)
mt
mt[,2]
mt[2,]
getwd()
getwd()
###
search()
getwd()
z<-c(1,2,3,4)
v<-c(0,82,2,8)
z%in%v
install.packages("readxls")
library(readxl)
read_xls("book_1.xls")
setwd("C:/Coding/Data Science/R/GB/R for data analysis")
read_xls("book_1.xls")
